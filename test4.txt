using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using LibGit2Sharp;
using LibGit2Sharp.Handlers;
using Newtonsoft.Json.Linq;

namespace WebApplication3
{
    public class RepoCloner
    {
        // Private class variables
        private Repository m_Repository;
        private readonly string m_WorkingDir;
        private readonly string m_UserName;
        private readonly string m_Password;
        private readonly string m_EmailId;
        private readonly string m_remoteUrl;
        private string m_branchName;
        private PushOptions m_PushOptions;
        public RepoCloner(string gitCfgFile)
        {
            JObject gitcfg = JObject.Parse(File.ReadAllText(gitCfgFile));
            m_UserName = (string)gitcfg["username"];
            m_Password = (string)gitcfg["password"];
            m_EmailId = (string)gitcfg["emailid"];
            m_remoteUrl = (string)gitcfg["remoteurl"];
            m_branchName = (string)gitcfg["branch"];
            m_WorkingDir = (string)gitcfg["localpath"];

            m_PushOptions = new PushOptions();
            SetPushOptions(new UsernamePasswordCredentials { Username = m_UserName, Password = m_Password});
        }

        public bool DoClone()
        {
            Repository.Clone(m_remoteUrl, m_WorkingDir, new CloneOptions { BranchName = m_branchName, Checkout = true });
            m_Repository = new Repository(m_WorkingDir);
            return true;
        }

        public bool SetPushOptions(UsernamePasswordCredentials credentials)
        {
            m_PushOptions.CredentialsProvider = (_url, _user, _cred) => credentials;
            return true;
        }

        public string DoCommit(string commitMsg)
        {
            Commands.Stage(m_Repository, "*");
            var signature = new Signature(m_UserName, m_EmailId, DateTimeOffset.Now);
            var commit = m_Repository.Commit(commitMsg, signature, signature);
            return commit.Sha;
        }

        public bool DoPush()
        {
            m_Repository.Network.Push(m_Repository.Branches[m_branchName], m_PushOptions);
            return true;
        }
        public bool DoAddFile(string filePath)
        {
            m_Repository.Index.Add(filePath);
            m_Repository.Index.Write();
            return true;
        }

        public List<string> GetLocalBranches()
        {
            List<string> branchNames = new List<string>();
            foreach (Branch b in m_Repository.Branches.Where(b => !b.IsRemote))
            {
                branchNames.Add(b.IsCurrentRepositoryHead ? "*" : " " + b.FriendlyName);
            }
            return branchNames;            
        }

        public List<string> GetLocalBranches(string commitSha)
        {
            List<string> branchNames = new List<string>();

            var localHeads = m_Repository.Refs.Where(r => r.IsLocalBranch);

            var commit = m_Repository.Lookup<Commit>(commitSha);
            var localHeadsContainingTheCommit = m_Repository.Refs.ReachableFrom(localHeads, new[] { commit });

            foreach (Branch b in localHeadsContainingTheCommit
                .Select(branchRef => m_Repository.Branches[branchRef.CanonicalName]))
            {
                branchNames.Add(b.CanonicalName);
            }

            return branchNames;
        }

        public bool DoCreateBranch(string branchName)
        {
            m_Repository.CreateBranch(branchName);
            return true;
        }

        public bool DoCreateBranch(string branchName, string inVersion)
        {
            m_Repository.CreateBranch(branchName, inVersion);
            return true;
        }

        public bool DoDeleteBranch(string branchName)
        {
            m_Repository.Branches.Remove(branchName);
            return true;
        }

        public bool DoEditBranchDescription(string branchName, string description)
        {
            var key = string.Format("branch.{0}.description", branchName);
            m_Repository.Config.Set(key, description.Replace(Environment.NewLine, string.Empty)); // set description
            return true;
        }

        public string GetCatFile()
        {
            string output = "";
            foreach (var item in m_Repository.RetrieveStatus())
            {
                if (item.State == FileStatus.ModifiedInWorkdir)
                {
                    var blob = m_Repository.Head.Tip[item.FilePath].Target as Blob;
                    string commitContent;
                    using (var content = new StreamReader(blob.GetContentStream(), System.Text.Encoding.UTF8))
                    {
                        commitContent = content.ReadToEnd();
                    }
                    string workingContent;
                    using (var content = new StreamReader(m_Repository.Info.WorkingDirectory + Path.DirectorySeparatorChar + item.FilePath, System.Text.Encoding.UTF8))
                    {
                        workingContent = content.ReadToEnd();
                    }
                    output += @"\n\n~~~~ Original file ~~~~";
                    output += commitContent;
                    output += @"\n\n~~~~ Current file ~~~~";
                    output += workingContent;
                }
            }
            return output;
        }

        public bool DoCheckout(string branchName)
        {
            var branch = m_Repository.Branches[branchName];

            if (branch == null)
            {
                // repository return false when branch not exists
                return false;
            }

            Commands.Checkout(m_Repository, branch);
            return true;
        }

        public string GetDiff()
        {
            string output = "";
            foreach (TreeEntryChanges c in m_Repository.Diff.Compare<TreeChanges>())
            {
                output += c;
            }
            return output;
        }

        public string DoFetch()
        {
            string logMessage = "";
            var remote = m_Repository.Network.Remotes["origin"];
            var refSpecs = remote.FetchRefSpecs.Select(x => x.Specification);
            Commands.Fetch(m_Repository, remote.Name, refSpecs, null, logMessage);
            return logMessage;
        }

        public List<string> GetUnmergedFiles()
        {
            List<string> fileList = new List<string>();
            foreach (IndexEntry e in m_Repository.Index)
            {
                if (e.StageLevel == 0)
                {
                    continue;
                }
                fileList.Add(string.Format("{0} {1} {2}       {3}",
                    Convert.ToString((int)e.Mode, 8),
                    e.Id.ToString(), (int)e.StageLevel, e.Path));
            }
            return fileList;
        }
    }

    public sealed class GitCloneManager
    {
        // Private static variables
        private static readonly object s_Lock = new object();
        private static GitCloneManager s_Instance = null;

        // Private class variables
        private readonly object m_TableLock;
        private Dictionary<string, RepoCloner> m_RepoClonerTable;

        // Private constructor for Singleton
        private GitCloneManager()
        {
            m_RepoClonerTable = new Dictionary<string, RepoCloner>();
            m_TableLock = new object();
        }

        public static GitCloneManager Instance
        {
            get
            {
                lock (s_Lock)
                {
                    if (s_Instance == null)
                    {
                        s_Instance = new GitCloneManager();
                    }
                    return s_Instance;
                }
            }
        }

        public bool CheckRepoClonerExists(string gitCfgFile)
        {
            lock (m_TableLock)
            {
                return m_RepoClonerTable.ContainsKey(gitCfgFile);
            }
        }

        public bool CheckRepoPathExists(string gitCfgFile)
        {
            return false;
        }

        public RepoCloner GetRepoCloner(string gitCfgFile)
        {
            lock (m_TableLock)
            {
                if (m_RepoClonerTable.ContainsKey(gitCfgFile) == false)
                {
                    // TODO: Check and create working dir atomically. If it exists, we should return failure
                    m_RepoClonerTable.Add(gitCfgFile, new RepoCloner(gitCfgFile));
                }
                return m_RepoClonerTable[gitCfgFile];
            }
        }

        public bool ClearRepoCloner(string gitCfgFile)
        {
            lock (m_TableLock)
            {
                return m_RepoClonerTable.Remove(gitCfgFile);
            }
        }
    }
    public partial class About : Page
    {
        public static Repository m_Repository;
        public static string m_TempDirectory;

        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            // TODO: This should come as input or should be locally generated if input is empty (e.g: C:\users\<userid>\gitrepo\<uniqueid>)
            string gitcfg = @"D:\git\git.json";

            /*
             * TODO
             * if ((CheckRepoClonerExists(localPath) == true) || (CheckRepoPathExists(localPath) == true)
             * {
             *    show error to user
             * }
             */

            // Get the cloner object for the local path and clone the repo
            var Cloner = GitCloneManager.Instance.GetRepoCloner(gitcfg);
            Cloner.DoClone();
        }

        protected void Button2_Click(object sender, EventArgs e)
        {
            // TODO: This should come as input. i.e the local path from which commit/push has to be done
            string gitcfg = @"D:\git\git.json";

            // TODO: The commit message should come from user
            string commitMsg = @"This is a sample commit";
            /*
             * TODO
             * if ((CheckRepoClonerExists(localPath) == false) || (CheckRepoPathExists(localPath) == false)
             * {
             *    show error to user
             * }
             */

            // Get the cloner object for the local path and clone the repo
            var Cloner = GitCloneManager.Instance.GetRepoCloner(gitcfg);
            Cloner.DoCommit(commitMsg);
            Cloner.DoPush();
         }
    }
}